-- Nome:   Mateus Agostinho dos Anjos
-- NUSP:   9298191

--------------------------------------------------------------------------------
--Utilizei o pgAdmin hosteado no IME (aquele que foi disponibilizado para o
--exercicio 7) para fazer esta lista 12
--------------------------------------------------------------------------------

-- funcao a)
CREATE OR REPLACE FUNCTION public.exercicio_a(
	preco_passado REAL
) RETURNS INTEGER AS $$

DECLARE 
	possivel_modelo INT := 1;
	preco_dif REAL := 900000; -- Aqui seria ideal usar +INF
	preco_atual REAL;
	pc_atual_preco REAL;
	pc_atual_modelo INT;
	pc_modelo_mais_proximo INT;

BEGIN
	FOR pc_atual_preco, pc_atual_modelo IN SELECT preco, modelo FROM PC
	LOOP
		IF abs(preco_passado - pc_atual_preco) < preco_dif THEN
			preco_dif = abs(preco_passado - pc_atual_preco);
			pc_modelo_mais_proximo = pc_atual_modelo;
		END IF;
	END LOOP;
	RETURN pc_modelo_mais_proximo;
END;$$
LANGUAGE plpgsql;

--------------------------------------------------------------------------------

-- funcao b)
CREATE OR REPLACE FUNCTION public.exercicio_b(
	fabricante_param CHAR, modelo INT
) RETURNS NUMERIC(6, 2) AS $$

DECLARE 
	fabricante_loop CHAR(2);
	modelo_loop INT;
	preco_loop NUMERIC(6, 2);
	preco_resp NUMERIC(6, 2) := NULL;

BEGIN
	FOR fabricante_loop, modelo_loop, preco_loop IN 
		(
			SELECT Produto.fabricante, PC.modelo, PC.preco FROM Produto, PC
			WHERE Produto.modelo = PC.modelo AND Produto.fabricante = fabricante_param
			UNION
			SELECT Produto.fabricante, Laptop.modelo, Laptop.preco FROM Produto, Laptop
			WHERE Produto.modelo = Laptop.modelo AND Produto.fabricante = fabricante_param
			UNION
			SELECT Produto.fabricante, Impressora.modelo, Impressora.preco FROM Produto, Impressora
			WHERE Produto.modelo = Impressora.modelo AND Produto.fabricante = fabricante_param
		)
	LOOP
		IF modelo_loop = modelo THEN
			preco_resp = preco_loop;
		END IF;
	END LOOP;
	RETURN preco_resp;
END;$$
LANGUAGE plpgsql;

--------------------------------------------------------------------------------

-- funcao c)
CREATE OR REPLACE FUNCTION exercicio_c(
	modelo INT, 
	fabricante CHAR, 
	velocidade INT, 
	tam_RAM INT, 
	tam_HD DOUBLE PRECISION
) RETURNS VOID AS $$

DECLARE
	modelo_novo_pc INT := modelo;

BEGIN
	LOOP
		BEGIN
			INSERT INTO PRODUTO VALUES (fabricante, modelo_novo_pc, 'pc');
			INSERT INTO PC VALUES (modelo_novo_pc, velocidade, tam_RAM, tam_HD);
			RAISE NOTICE 'PC DE MODELO: % INSERIDO COM SUCESSO!', modelo_novo_pc;
			RETURN;
			EXCEPTION WHEN SQLSTATE '23000' THEN
				BEGIN
					modelo_novo_pc = modelo_novo_pc + 1;
					RAISE NOTICE 'MODELO DE PC JÁ EXISTENTE!';
				END;
		END;
	END LOOP;
END;
$$ LANGUAGE plpgsql;

--------------------------------------------------------------------------------

-- funcao d)
CREATE TYPE resposta AS (num_produtos_mais_caros_que BIGINT, tipo_produto CHAR(20));

CREATE OR REPLACE FUNCTION exercicio_d(
	preco_dado INT
) RETURNS SETOF resposta AS $$
	
BEGIN
	RETURN QUERY
		(SELECT COUNT(*), PRODUTO.tipo FROM PC, PRODUTO
		WHERE PRODUTO.modelo = PC.modelo AND preco > preco_dado
		GROUP BY (PRODUTO.tipo)
		UNION
		SELECT COUNT(*), PRODUTO.tipo FROM LAPTOP, PRODUTO
		WHERE PRODUTO.modelo = LAPTOP.modelo AND preco > preco_dado
		GROUP BY (PRODUTO.tipo))
		UNION
		SELECT COUNT(*), PRODUTO.tipo FROM IMPRESSORA, PRODUTO
		WHERE PRODUTO.modelo = IMPRESSORA.modelo AND preco > preco_dado
		GROUP BY (PRODUTO.tipo);
		EXCEPTION
            WHEN NO_DATA_FOUND THEN
                RETURN QUERY SELECT NULLIF (1, 1);
END;
$$ LANGUAGE plpgsql;

--A parte do "EXCEPION WHEN NO_DATA_FOUND" foi uma tentativa de colocar 0 (zero)
--nas consultas cujo resultado do COUNT era vazio. Não funcionou como o esperado
--mas deixei escrito como forma de registro da tentativa. Entretanto, a saída
--está bem visual e a falta do 0 não prejudicou muito o resultado do exercício